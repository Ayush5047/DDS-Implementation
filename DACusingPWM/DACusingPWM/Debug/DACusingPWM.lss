
DACusingPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  000000fc  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  00000290  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000df  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000076  00000000  00000000  000003fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000d9  00000000  00000000  00000471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a2  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
  37, 39, 42, 44, 46, 49, 51, 54, 56, 59, 62, 64, 67, 70, 73, 76,
  79, 81, 84, 87, 90, 93, 96, 99, 103, 106, 109, 112, 115, 118, 121, 124
};
uint16_t phaseReg, phaseInc;
int main(void){
	DDRD |= (_BV(PORTD6)) | (_BV(PORTD5));
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 66       	ori	r24, 0x60	; 96
  aa:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (_BV(WGM00) | _BV(WGM01) | _BV(COM0A1));
  ac:	83 e8       	ldi	r24, 0x83	; 131
  ae:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS00);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	85 bd       	out	0x25, r24	; 37
	OCR0A=0;
  b4:	17 bc       	out	0x27, r1	; 39
	phaseReg=0;
  b6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <phaseReg+0x1>
  ba:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <phaseReg>
	phaseInc=10500;
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	99 e2       	ldi	r25, 0x29	; 41
  c2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
  c6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
	sei();
  ca:	78 94       	sei
	while (1){
		OCR0A = SINE_TABLE[(uint8_t)((phaseReg+=phaseInc)>> 8)];
  cc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_end>
  d0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_end+0x1>
  d4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <phaseReg>
  d8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <phaseReg+0x1>
  dc:	82 0f       	add	r24, r18
  de:	93 1f       	adc	r25, r19
  e0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <phaseReg+0x1>
  e4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <phaseReg>
  e8:	89 2f       	mov	r24, r25
  ea:	99 27       	eor	r25, r25
  ec:	fc 01       	movw	r30, r24
  ee:	e0 50       	subi	r30, 0x00	; 0
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	80 81       	ld	r24, Z
  f4:	87 bd       	out	0x27, r24	; 39
	}
  f6:	ea cf       	rjmp	.-44     	; 0xcc <main+0x26>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
