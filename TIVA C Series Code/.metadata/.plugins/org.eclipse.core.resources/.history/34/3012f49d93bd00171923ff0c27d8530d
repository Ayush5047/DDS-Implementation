/****************************************************************
  * SecondDraft
  * This file is created to test code for low frequency waves
  * Wave: Square,Sine,Ramp,Triangle Wave
  * Frequency 100Hz
  * DAC 8 bit Therefore values will range from 0-255
  * Zero Value 127
  * Full Scale Value 127
  * No of samples 1000
  * Created: 18/10/2017 3:02 PM
  * Author : Ayush Gaurav
  * B-Tech Final Year
  * ECED
  * MNNIT Allahabad
  ****************************************************************/


 /**** macro definitions ******************/

 #define DACBit             8
 #define ZeroVal            (1<<(DACBit-1))-1
 #define FullScaleVal       (1<<(DACBit-1))-1
 #define NumberOfSampleBits 10
 #define NumberOfSamples    (1<<NumberOfSampleBits)
 #define oneHertzValue      1505
 /*** All the required header files********/

#include <stdint.h>
 #include <stdbool.h>
 #include "inc/hw_types.h"
 #include "inc/hw_memmap.h"
 #include "driverlib/sysctl.h"
 #include "driverlib/gpio.h"
#include "driverlib/gpio.h"
#include "inc/hw_gpio.h"
#define TARGET_IS_BLIZZARD_RB1
#include "driverlib/rom.h"

 #include<math.h>

 /************* function declarartions*******/
 void portInit();
 void calculateSamples();
 void calculateSamplesSquare();
 void calculateSamplesSine();
 void calculateSamplesTriangle();
 void calculateSamplesRamp();
 void calculateSamplesImpulse();
 void calculateSamplesArbitrary();

 /****** Array for Samples *****************/
 volatile uint16_t samples[NumberOfSamples];

 /***********Global Declaration*************/
 uint32_t phaseAccumulatorReg;
 uint64_t frequencyReg;

#define GPIOA_DATA ((volatile uint32_t*)0x400043fc)
#define GPIOB_DATA ((volatile uint32_t*)0x400053fc)
 int main(void){
     calculateSamples();
     portInit();
     phaseAccumulatorReg=0;
     frequencyReg=oneHertzValue*850000;
     while(1){
         HWREG(GPIO_PORTB_BASE +(GPIO_O_DATA +(0xff << 2))) = samples[(phaseAccumulatorReg=(phaseAccumulatorReg)+frequencyReg)>>(32-NumberOfSampleBits)];
         //HWREG(GPIO_PORTA_BASE +(GPIO_O_DATA +(0x0c << 2))) = samples[(phaseAccumulatorReg)>>(32-NumberOfSampleBits)]>>6;
         //ROM_GPIOPinWrite(GPIO_PORTB_BASE,0xff,samples[(phaseAccumulatorReg=(phaseAccumulatorReg)+frequencyReg)>>(32-NumberOfSampleBits)]);
         //GPIOPinWrite(GPIO_PORTB_BASE,0xff,samples[(phaseAccumulatorReg=phaseAccumulatorReg+frequencyReg)>>(32-NumberOfSampleBits)]);
     }
 }
 void portInit(){
     SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
     SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
     GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, 0xff);
     SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
     GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, 0x0c);
 }
 void calculateSamples(){
     //calculateSamplesSquare();
     calculateSamplesSine();
     //calculateSamplesTriangle();
     //calculateSamplesRamp();
     //calculateSamplesImpulse();
 }
 void calculateSamplesSquare(){
      uint16_t i=0;
      for(;i<NumberOfSamples;i++)
          samples[i]=(i<(NumberOfSamples/2)?-(FullScaleVal):FullScaleVal)+ZeroVal;
  }
  void calculateSamplesSine(){
      uint16_t i=0;
      for(;i<NumberOfSamples;i++){
          samples[i]=(uint16_t)(sin(i*6.28/NumberOfSamples)*FullScaleVal+ZeroVal);
      }
  }
  void calculateSamplesRamp(){
      uint16_t i=0;
      for(;i<NumberOfSamples;i++){
          samples[i]=i;
      }
  }
  void calculateSamplesTriangle(){
      uint16_t i=0;
      for(;i<NumberOfSamples;i++){
          samples[i]=i<=FullScaleVal?i*2:2*(NumberOfSamples-1-i);
      }
  }
  void calculateSamplesImpulse(){
      uint16_t i=0;
      for(;i<NumberOfSamples;i++)
          samples[i]=(i<(NumberOfSamples/10)?(FullScaleVal):-FullScaleVal)+ZeroVal;
 }
 void calculateSamplesArbitrary(){
 }
